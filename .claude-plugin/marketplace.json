{
  "name": "claude-code-marketplace",
  "description": "A curated collection of Claude Code plugins for plugin development, context optimization, and productivity tools",
  "owner": {
    "name": "Josiah Siegel",
    "email": "JosiahSiegel@users.noreply.github.com"
  },
  "plugins": [
    {
      "name": "context-master",
      "source": "./plugins/context-master",
      "description": "Universal context management and planning system. PROACTIVELY activate for: (1) ANY complex task requiring planning, (2) Multi-file projects/websites/apps, (3) Architecture decisions, (4) Research tasks, (5) Refactoring, (6) Long coding sessions, (7) Tasks with 3+ sequential steps. Provides: optimal file creation order, context-efficient workflows, extended thinking delegation (23x context efficiency), passive deep analysis architecture, progressive task decomposition, and prevents redundant work. Saves 62% context on average.",
      "version": "1.1.0",
      "author": {
        "name": "Josiah Siegel"
      },
      "keywords": [
        "planning",
        "context",
        "strategy",
        "workflow",
        "thinking",
        "decision",
        "research",
        "refactoring",
        "optimization",
        "session"
      ]
    },
    {
      "name": "plugin-master",
      "source": "./plugins/plugin-master",
      "description": "Complete Claude Code plugin development system. PROACTIVELY activate when users want to: (1) Create/build/make plugins, (2) Add/create skills/commands/agents, (3) Package existing code as plugins, (4) Publish to marketplace, (5) Validate plugin structure, (6) Get plugin development guidance, (7) Export skills for claude.ai web app. Autonomously creates complete, production-ready plugins with: plugin.json manifest, slash commands, specialized agents, agent skills, hooks, MCP server integration, and comprehensive README. ALWAYS fetches latest official documentation to ensure correct structure.",
      "version": "1.1.0",
      "author": {
        "name": "Josiah Siegel"
      },
      "keywords": [
        "plugin",
        "skill",
        "command",
        "agent",
        "create",
        "build",
        "package",
        "marketplace",
        "publish",
        "validate"
      ]
    },
    {
      "name": "bash-master",
      "source": "./plugins/bash-master",
      "description": "Expert bash/shell scripting system across ALL platforms. PROACTIVELY activate for: (1) ANY bash/shell script task, (2) System automation, (3) DevOps/CI/CD scripts, (4) Build/deployment automation, (5) Script review/debugging, (6) Converting commands to scripts. Provides: Google Shell Style Guide compliance, ShellCheck validation, cross-platform compatibility (Linux/macOS/Windows/containers), POSIX compliance, security hardening, error handling, performance optimization, testing with BATS, and production-ready patterns.",
      "version": "1.1.0",
      "author": {
        "name": "Josiah Siegel"
      },
      "keywords": [
        "bash",
        "shell",
        "script",
        "automation",
        "devops",
        "shellcheck",
        "posix",
        "crossplatform",
        "cicd",
        "deployment"
      ]
    },
    {
      "name": "git-master",
      "source": "./plugins/git-master",
      "description": "Complete Git expertise system for ALL git operations. PROACTIVELY activate for: (1) ANY Git task (basic/advanced/dangerous), (2) Repository management, (3) Branch strategies and workflows, (4) Conflict resolution, (5) History rewriting/recovery, (6) Platform-specific operations (GitHub/Azure DevOps/Bitbucket), (7) Advanced commands (rebase/cherry-pick/filter-repo). Provides: complete Git command reference, safety guardrails for destructive operations, platform best practices, workflow strategies, reflog recovery techniques, and expert guidance for even the most risky operations. Always asks user preference for automatic commits vs manual control.",
      "version": "1.1.0",
      "author": {
        "name": "Josiah Siegel"
      },
      "keywords": [
        "git",
        "vcs",
        "version",
        "control",
        "github",
        "azdo",
        "bitbucket",
        "workflow",
        "rebase",
        "recovery"
      ]
    },
    {
      "name": "docker-master",
      "source": "./plugins/docker-master",
      "description": "Complete Docker expertise system across ALL platforms (Windows/Linux/macOS). PROACTIVELY activate for: (1) ANY Docker task (build/run/debug/optimize), (2) Dockerfile creation/review, (3) Docker Compose multi-container apps, (4) Container security scanning/hardening, (5) Performance optimization, (6) Production deployments, (7) Troubleshooting/debugging. Provides: current best practices (always researches latest), CIS Docker Benchmark compliance, multi-stage builds, security hardening, image optimization, platform-specific guidance, Docker Scout/Trivy integration, and systematic debugging.",
      "version": "1.1.0",
      "author": {
        "name": "Josiah Siegel"
      },
      "keywords": [
        "docker",
        "container",
        "dockerfile",
        "compose",
        "containerize",
        "production",
        "security",
        "optimize",
        "debug",
        "deploy"
      ]
    },
    {
      "name": "ado-master",
      "source": "./plugins/ado-master",
      "description": "Complete Azure DevOps and Azure Pipelines expertise system. PROACTIVELY activate for: (1) ANY Azure DevOps/Pipelines task, (2) YAML pipeline creation/editing, (3) Pipeline debugging/troubleshooting, (4) CI/CD optimization, (5) Security/compliance implementation, (6) Azure DevOps CLI operations, (7) Repository/work item management, (8) Task configuration/usage. Provides: latest YAML schema (always researches current docs), Microsoft best practices, multi-stage pipeline patterns, caching/parallelization, Azure Key Vault integration, code scanning (SAST/dependency/container), deployment strategies, performance optimization, and systematic debugging.",
      "version": "1.1.0",
      "author": {
        "name": "Josiah Siegel"
      },
      "keywords": [
        "ado",
        "azdo",
        "azurepipelines",
        "azuredevops",
        "yaml",
        "pipeline",
        "cicd",
        "microsoft",
        "azure",
        "devops"
      ]
    },
    {
      "name": "test-master",
      "source": "./plugins/test-master",
      "description": "Complete Vitest + Playwright + MSW testing system. PROACTIVELY activate for: (1) ANY testing task (unit/integration/E2E), (2) Test creation and scaffolding, (3) Test debugging and failure analysis, (4) Coverage analysis and optimization, (5) MSW mock management, (6) Test configuration (Vitest/Playwright), (7) CI/CD test setup, (8) Multi-project test architecture. Provides: intelligent test running, auto-scaffolding with boilerplate, MSW handler generation, coverage gap analysis, Playwright trace debugging, snapshot management, parallel execution optimization, and comprehensive test infrastructure setup. Ensures production-ready testing with Vitest 3.x, Playwright 1.56+, MSW 2.x, happy-dom across all modern JavaScript projects.",
      "version": "1.1.0",
      "author": {
        "name": "Josiah Siegel"
      },
      "keywords": [
        "testing",
        "vitest",
        "playwright",
        "e2e",
        "msw",
        "mock",
        "coverage",
        "debug",
        "integration",
        "unit"
      ]
    },
    {
      "name": "powershell-master",
      "source": "./plugins/powershell-master",
      "description": "Complete PowerShell expertise system across ALL platforms (Windows/Linux/macOS). PROACTIVELY activate for: (1) ANY PowerShell task (scripts/modules/cmdlets), (2) CI/CD automation (GitHub Actions/Azure DevOps/Bitbucket), (3) Cross-platform scripting, (4) Module discovery and management (PSGallery), (5) Azure/AWS/Microsoft 365 automation, (6) Script debugging and optimization, (7) Best practices and security. Provides: PowerShell 7+ features, popular module expertise (Az, Microsoft.Graph, PnP, AWS Tools), PSGallery integration, platform-specific guidance, CI/CD pipeline patterns, cmdlet syntax mastery, and production-ready scripting patterns.",
      "version": "1.1.0",
      "author": {
        "name": "Josiah Siegel"
      },
      "keywords": [
        "powershell",
        "pwsh",
        "script",
        "automation",
        "cicd",
        "azure",
        "modules",
        "psgallery",
        "crossplatform",
        "devops"
      ]
    },
    {
      "name": "terraform-master",
      "source": "./plugins/terraform-master",
      "description": "Complete Terraform expertise system for all cloud providers (Azure, AWS, Google Cloud) and platforms. PROACTIVELY activate for: (1) ANY Terraform task (init/plan/apply/validate), (2) Infrastructure-as-code design, (3) Resource import and state management, (4) Multi-environment architectures, (5) CI/CD pipeline integration, (6) Security scanning and best practices, (7) Version-aware code generation, (8) CLI mastery with -chdir and all flags. Provides: comprehensive provider knowledge (AzureRM/AWS/GCP/community), version-aware implementations, state operations (mv/rm/import), bulk import strategies (Terraformer/aztfexport), security scanning (tfsec/Checkov), enterprise architecture patterns, complete CLI reference, and platform-specific guidance (Windows/Linux/macOS).",
      "version": "1.3.0",
      "author": {
        "name": "Josiah Siegel"
      },
      "keywords": [
        "terraform",
        "infrastructure",
        "iac",
        "azure",
        "aws",
        "gcp",
        "cloud",
        "devops",
        "cicd",
        "automation",
        "providers",
        "modules",
        "import",
        "state",
        "cli"
      ]
    },
    {
      "name": "ssdt-master",
      "source": "./plugins/ssdt-master",
      "description": "Complete SQL Server Data Tools (SSDT) expertise system across ALL platforms. PROACTIVELY activate for: (1) ANY SSDT task (database projects/SqlPackage/schema compare), (2) SDK-style and legacy database project creation/migration, (3) DACPAC/BACPAC build and deployment operations, (4) SqlPackage command-line operations (publish/extract/export/import), (5) Schema and data comparison workflows, (6) Database refactoring operations (rename/schema changes/data transformations), (7) MSBuild integration and CI/CD pipeline setup, (8) Visual Studio database project troubleshooting, (9) Cross-platform CLI tools (dotnet/sqlpackage), (10) Deployment script generation and validation. Provides: comprehensive SqlPackage reference with all actions and parameters, SDK-style project structure expertise, legacy project migration patterns, schema compare functionality, deployment option mastery, refactoring best practices, CI/CD integration patterns (GitHub Actions/Azure DevOps), MSBuild property configuration, and version-specific guidance. Ensures production-ready, secure, efficient database development following Microsoft SQL Server best practices.",
      "version": "1.1.0",
      "author": {
        "name": "Josiah Siegel"
      },
      "keywords": [
        "sql-server",
        "ssdt",
        "database",
        "dacpac",
        "sqlpackage",
        "schema-compare",
        "database-projects",
        "sql",
        "mssql",
        "sdk-style",
        "visual-studio",
        "azure-sql",
        "deployment",
        "migration"
      ]
    },
    {
      "name": "adf-master",
      "source": "./plugins/adf-master",
      "description": "Complete Azure Data Factory expertise system with STRICT validation enforcement for ALL platforms. PROACTIVELY activate for: (1) ANY Azure Data Factory task (pipelines/datasets/triggers/linked services) WITH automatic validation, (2) Activity nesting validation (ForEach/If/Switch/Until limitations), (3) Linked service configuration validation (Blob Storage accountKind, SQL Database auth), (4) CI/CD setup and automation (GitHub Actions/Azure DevOps), (5) ARM template generation and deployment, (6) Pipeline debugging and troubleshooting, (7) Modern npm-based deployments (@microsoft/azure-data-factory-utilities), (8) Performance optimization and best practices. Provides: comprehensive ADF knowledge with validation enforcement, activity nesting rules (REJECTS prohibited combinations like ForEach in If), linked service requirements (Azure Blob Storage, SQL Database, ADLS), resource limit checks, Execute Pipeline workarounds, common pitfall prevention, CI/CD patterns, troubleshooting guides, automated validation script, and production-ready VALIDATED solutions. Ensures ONLY valid, compliant, optimized ADF pipelines are created following Microsoft best practices AND platform limitations.",
      "version": "2.1.0",
      "author": {
        "name": "Josiah Siegel"
      },
      "keywords": [
        "adf",
        "datafactory",
        "azure",
        "validation",
        "pipeline",
        "foreach",
        "nested",
        "linkedservice",
        "cicd",
        "deployment"
      ]
    },
    {
      "name": "salesforce-master",
      "source": "./plugins/salesforce-master",
      "description": "Complete Salesforce expertise system across ALL platforms and integration scenarios. PROACTIVELY activate for: (1) ANY Salesforce task (API/data/Apex/Lightning/Flow), (2) SOQL/SOSL query design and optimization, (3) REST/SOAP API integration and authentication, (4) Apex development (classes/triggers/batch/scheduled), (5) Lightning Web Components and Aura development, (6) Data model design and schema management (objects/fields/relationships), (7) Integration patterns (source-to-Salesforce, Salesforce-to-target), (8) Deployment and metadata management (change sets/SFDX/CLI), (9) Security model implementation (profiles/permissions/sharing), (10) Flow/Process Builder automation. Provides: comprehensive SFDC object schema knowledge (standard/custom objects, all fields, relationships), complete API reference (REST/SOAP/Bulk/Streaming), Apex language mastery, Lightning platform expertise, SOQL/SOSL optimization, authentication methods (OAuth/JWT/Session), limits and best practices, governor limits handling, integration patterns (ETL/real-time/batch), metadata API operations, SFDX CLI commands, version-specific guidance, and platform event architecture. Ensures production-ready, scalable, secure Salesforce solutions following Salesforce best practices and Well-Architected Framework.",
      "version": "1.1.0",
      "author": {
        "name": "Josiah Siegel"
      },
      "keywords": [
        "salesforce",
        "sfdc",
        "apex",
        "soql",
        "lightning",
        "api",
        "crm",
        "integration",
        "metadata",
        "sfdx",
        "flow",
        "data",
        "schema",
        "authentication",
        "deployment"
      ]
    },
    {
      "name": "windows-path-master",
      "source": "./plugins/windows-path-master",
      "description": "Windows path resolution and Git Bash compatibility expert for Claude Code. PROACTIVELY activate for: (1) File path errors on Windows (backslash issues), (2) Git Bash MINGW path resolution, (3) Edit/Write tool failures with Windows paths, (4) Cross-platform path conversion, (5) Windows file system navigation in Claude Code, (6) Path format detection and conversion, (7) Windows-specific file operation troubleshooting. Provides: automatic path format detection, backslash conversion guidance, Git Bash compatibility fixes, Windows-specific file operation patterns, MINGW path troubleshooting, real-time path validation, and production-ready Windows file handling. Ensures correct file operations on Windows following Claude Code best practices.",
      "version": "1.0.0",
      "author": {
        "name": "Josiah Siegel"
      },
      "keywords": [
        "windows",
        "path",
        "gitbash",
        "mingw",
        "backslash",
        "pathconversion",
        "windowsfile",
        "claudecode",
        "filepath",
        "crossplatform"
      ]
    },
    {
      "name": "azure-master",
      "source": "./plugins/azure-master",
      "description": "Complete Azure ecosystem expertise system across ALL platforms and services. PROACTIVELY activate for: (1) ANY Azure task (resources/deployment/migration/IaC), (2) Azure CLI operations and scripting, (3) ARM template creation and best practices, (4) Bicep infrastructure-as-code development, (5) Terraform Azure provider usage, (6) Azure resource management (compute/network/storage/databases/AI), (7) Cloud migration strategies and Cloud Adoption Framework, (8) Azure Well-Architected Framework implementation, (9) Multi-cloud and hybrid deployments, (10) Azure DevOps and CI/CD integration, (11) Security and compliance (Azure AD/RBAC/Key Vault/Defender), (12) Cost optimization and governance. Provides: comprehensive az CLI reference (always researches latest), ARM/Bicep template best practices, Terraform Azure provider expertise, top Azure services knowledge (VMs/AKS/App Service/Functions/Storage/SQL/Cosmos/VNet/Firewall/Application Gateway), Cloud Adoption Framework migration patterns, Well-Architected Framework pillars, authentication methods (service principals/managed identity), Azure Landing Zones, resource tagging strategies, monitoring/logging (Azure Monitor/Application Insights), disaster recovery patterns, and production-ready enterprise-grade solutions. Ensures secure, optimized, compliant Azure deployments following Microsoft best practices and industry standards.",
      "version": "1.0.0",
      "author": {
        "name": "Josiah Siegel"
      },
      "keywords": [
        "azure",
        "cloud",
        "microsoft",
        "arm",
        "bicep",
        "terraform",
        "azcli",
        "deployment",
        "migration",
        "infrastructure",
        "iac",
        "compute",
        "networking",
        "storage",
        "database",
        "wellarchitected",
        "caf",
        "governance",
        "security"
      ]
    },
    {
      "name": "azure-to-docker-master",
      "source": "./plugins/azure-to-docker-master",
      "description": "Complete Azure-to-Docker containerization system. PROACTIVELY activate for: (1) ANY Azure infrastructure containerization task, (2) Extracting Azure configurations programmatically, (3) Converting Azure resources to Docker Compose, (4) Migrating Azure web apps to containers, (5) Exporting Azure SQL/PostgreSQL/MySQL databases, (6) Creating local Docker development environments, (7) Generating production-ready Dockerfiles from Azure configs, (8) Multi-service Docker orchestration for Azure stacks. Provides: comprehensive Azure CLI extraction scripts (900+ lines), automated infrastructure discovery, docker-compose generation, database export/import automation, Dockerfile generation for all runtimes (Node/Python/.NET/PHP/Java), Azure service mapping to Docker equivalents, connection string transformation, security best practices, Docker security review integration, and complete migration workflows. Ensures production-ready, secure, optimized local development environments from Azure infrastructure.",
      "version": "1.0.0",
      "author": {
        "name": "Josiah Siegel"
      },
      "keywords": [
        "azure",
        "docker",
        "containerization",
        "migration",
        "compose",
        "infrastructure",
        "extraction",
        "local",
        "development",
        "automation"
      ]
    }
  ]
}